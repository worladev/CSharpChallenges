/*
 * VARIABLES AND DATA TYPES
 * 
 * int - [4 bytes] stores integers (whole numbers), without decimals, from -2,147,483,648 to 2,147,483,647
 * long - [8 bytes] stores whole numbers from -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807
 * float - [4 bytes] stores fractional numbers. Sufficient for storing 6 to 7 decimal digits
 * double - [8 bytes] stores fractional numbers. Sufficient for storing 15 decimal digits
 * decimal - 
 * char - [2 bytes] stores single characters, such as 'a' or 'B'. Char values are surrounded by single quotes
 * string - [2 bytes] stores text, such as "Hello World". String values are surrounded by double quotes
 * bool - [1 bit ] stores values with two states: true or false
 * 
 * const - declaring a variable as constant, unchangeable and read only
 * 
 * 
 * 
 * ** NUMERIC
 */


/*
 * TYPE CONVERSION -> in-built methods
 * Convert.ToInt32()
 * Convert.ToInt64()
 * Convert.ToFloat()
 * Convert.ToDouble()
 * Convert.ToString()
 * 
 */


/*
 * OPERATORS
 * Arithmetic - +, -, *, /, %, ++, -- 
 * Assignment - =, +=, -=, *=, /=, %=, &=, |=, ^=, >>=, <<=
 * Comparison - ==, !=, >, <, >=, <=
 * Logical - &&, ||, ! 
 *
 */


/*
 * MATHS CLASS METHODS
 * Math.Max()
 * Math.Min()
 * Math.Sqrt()
 * Math.Abs()
 * Math.Round()
 * Math.Pow()
 */


** NUMERIC FORMATTING


/*
 * ** STRING
 *
 * variable.Length
 * variable.ToUpper()
 * variable.ToLower()
 * variable.IndexOf(character)
 * variable.Substring(index) - returns a new string starting from a specified location
 * string.Empty
 * string.IsNullOrEmpty(variable)
 * variable.Equals(otherVariable) // compares references in memory
 * variable.Contains(character)
 * 
 * 
 * 
 * Concatenation - + or string.Concat(comma separated values)
 * Interpolation - $""
 * Using back slash for quotation within a string
 *  e.g., "Michael said "Come here"" ==> "Michael said \"Come here\""
 *      or C:\Users\CodeWorl\Desktop\c#_tuts ==> C:\\Users\\CodeWorl\\Desktop\\c#_tuts
 *      or Verbatim: @"C:\Users\CodeWorl\Desktop\c#_tuts"
 *                   @"Michael said "Come here""
 * 
 * 
 */


 /*
  * CONDITIONS AND IF STATEMENTS
  * Ternary: variable = (condition) ? expressionTrue :  expressionFalse;
  * 
  */



 /*
  * SWITCH
  * switch (expression) {
  *      case x:
  *          code block
  *          break;
  *      case y:
  *          code block;
  *          break;
  *      default case:
  *          code block
  *          break;
  * }
  */


 /*
  * LOOPS
  * 
  * WHILE LOOP 
  * while (condition) {
  *      code block
  * }
  */


 /*
  * DO WHILE LOOP
  * 
  * do {
  *  code block
  * } while (condition)
  * 
  * FOR LOOP
  * for (loop variable; condition; increment/decrement) {
  *      code block
  * }
  * 
  * NESTED LOOP
  * 
  * FOR EACH LOOP - loops through elements in an array or other data sets
  * 
  * 
  */


  /*
   * ARRAYS - immutable
   *	
   *	Declaration
   *  dataType[] arrayName = new dataType[arraySize];
   *
   * store multiple values in a single variable
   *
   * use square brackets and index vallues to access elements
   * 
   * .Length
   *      - gets the number of elements in the array.
   *
   * LOOPING/ ITERATING THROUGH ARRAYS
   * for each(dataType variableName in arrayName){}
   * 
   * METHODS
   * Array.sort(arrayName)
   *  - sort the array in ascending order
   * 
   * Array.Reverse(arrayName)
   *  - reverse the order of elements
   * 
   * Array.IndexOf(arrayName, value, startIndex)
   *  - returns index of the first occureance of value.
   *  Usage: int variableName = Array.IndexOf(arrayName, value)
   * 
   * Array.Copy(sourceArray, destinationArray, length)
   *  - copies element(s) from destinationArray to sourceArray
   * 
   * Array.Clear(arrayName, startIndex, length)
   *  - reset array values back to their default values.
   * 
   * Array.Fill(arrayName, value)
   *  - fills the entire array with the element of value
   * 
   * Array.LastIndexOf(arrayName, value)
   *      Usage: int variableName = Array.LastIndexOf(arrayName, value)
   *  
   * Array.Resize(ref arrayName, newSize)
   * 
   * Array.Find(arrayName, condition)
   * 
   * Array.FindAll(arrayName, condition)
   * 
   * Array.ForEach(arrayName, action)
   * 
   * Array.Exists(arrayName, condition)
   * 
   * Array.TrueForAll(arrayName, condition)
   *      Usage: bool match = Array.TrueForAll(arrayName, condition)
   * 
   * PROPERTIES
   * arrayName.Rank()
   * 
   * OTHERS
   * Multidimensional arrays - creates and set an element in a 2D array
   * Jagged Arrays - creates a jagged array
   * LINQ with Arrays
   * .GetValue()
   * .SetValue()
   * 
   */


  /*
   * LISTS - mutable and dynamic
   *	List<dataType> listName = new List<dataType>();
   *
   * METHODS
   * 
   * use square brackets with indexPosition to access element(s)
   * 
   * .Add() -
   *
   * .Remove() - 
   *
   * .Count - 
   * 
   * .AddRange()
   *	- adds multiple elements
   *	-usage variableName.AddRange(new int[] {1, 2, 3, 4});
   * 
   * .Insert(indexPosition, value)
   *	-inserts value at the position specified
   * 
   * .Remove(value)
   *	-removes the first occurence of value
   *
   * .RemoveAt(indexPosition)
   *	-removes the element at the specified index
   *
   * .RemoveRange(indexPosition, numberOfItems)
   *	-removes numberOfItems starting from indexPosition
   *
   * .Contains(value)
   *	-returns true if value is in the list
   *
   * .IndexOf(value)
   *	-gets the index of the first occurence of value
   * 
   * .Sort()
   *	-sorts the list in ascending order
   * 
   * .Reverse()
   *	-reverse the list
   *
   * .Count
   *	-gets the number of elements
   *
   * .Capacity
   *	-gets the current capacity
   * 
   * .EnsureCapacity(limitValue)
   *	-ensures the list can hold at least limitValue elements
   * 
   * .Clear()
   *	-empties the list
   * 
   * .CopyTo(destinationArray)
   *	-copies the elements of a list to an array starting at a particular array index
   * 
   * 
   * LINQ METHODS
   *
   */


double videoPauseTime = 3.55;



